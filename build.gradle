buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.11'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	runtimeOnly 'com.mysql:mysql-connector-j'


	// Spring Security OAuth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// JSON Binding API
	implementation 'javax.json:javax.json-api:1.1.4'
	// Jackson JSON Processor
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.4'



	compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

	// spring-doc for local test(swagger-ui)
	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version:'1.6.9'

	// S3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'


	//패턴을 사용
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// redis 사용
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	//jasypt 암호화
	implementation group: 'com.github.ulisesbocchio', name: 'jasypt-spring-boot-starter', version: '3.0.4'

	// queryDsl 사용
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	annotationProcessor(
			"javax.persistence:javax.persistence-api",
			"javax.annotation:javax.annotation-api",
			"com.querydsl:querydsl-apt:${queryDslVersion}:jpa")

}

tasks.named('test') {
	useJUnitPlatform()
}

sourceSets {
	main {
		java {
			srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
		}
	}
}

bootJar {

	doFirst {
		def jasyptPropertiesFile = file("${rootDir}/jasypt.properties")
		if (jasyptPropertiesFile.exists()) {
			jvmArguments = ["--jasypt.encryptor.password=${jasyptPropertiesFile.text.trim()}"]
		} else {
			throw new IllegalStateException("jasypt.properties 파일이 존재하지 않습니다.")
		}
	}
	duplicatesStrategy 'exclude'
}
